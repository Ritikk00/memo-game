

// card icons
const icons = ['ЁЯНО','ЁЯНМ','ЁЯНЗ','ЁЯНУ','ЁЯНТ','ЁЯНН','ЁЯеЭ','ЁЯНЙ']; // 8 рдЖрдЗрдХрди = 8 pairs = 16 рдХрд╛рд░реНрдб
let cardValues = [];

// DOM elements
const board = document.getElementById('game-board');
const movesSpan = document.getElementById('moves');
const matchesSpan = document.getElementById('matches');
const restartBtn = document.getElementById('restart');

let firstCard = null;
let secondCard = null;
let lockBoard = false; // checking the match
let moves = 0;
let matches = 0;

// Fisher-Yates shuffle
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// рдмреЛрд░реНрдб рдмрдирд╛рдУ
function initGame() {
  // рд╕реЗрдЯрдЕрдк рд╡реИрд▓реНрдпреВрдЬрд╝
  cardValues = [...icons, ...icons]; // duplicate to make pairs
  shuffle(cardValues);

  board.innerHTML = ''; 
  moves = 0;
  matches = 0;
  updateStats();

  // рд╣рд░ рдХрд╛рд░реНрдб DOM рдмрдирд╛рдУ
  cardValues.forEach((val, index) => {
    const card = document.createElement('div');
    card.classList.add('card');
    card.dataset.value = val; // рдХрд╛рд░реНрдб рдХреА рдкрд╣рдЪрд╛рди

    // inner structure (front + back)
    card.innerHTML = `
      <div class="card-inner">
        <div class="card-back">?</div>
        <div class="card-front">${val}</div>
      </div>
    `;

    // рдХреНрд▓рд┐рдХ рд╣реИрдВрдбрд▓рд░
    card.addEventListener('click', () => onCardClicked(card));

    board.appendChild(card);
  });
}

// рдХрд╛рд░реНрдб рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рдкрд░
function onCardClicked(card) {
  if (lockBoard) return;            // рдмреНрд▓реЙрдХ рд╣реЛ рддреЛ рдХреБрдЫ рди рдХрд░реЗрдВ
  if (card === firstCard) return;   // рд╡рд╣реА рдХрд╛рд░реНрдб рджреЛ рдмрд╛рд░ рдХреНрд▓рд┐рдХ рди рд╣реЛ

  card.classList.add('flipped');    // рдХрд╛рд░реНрдб рдХреЛ рдкрд▓рдЯреЛ (face-up)

  if (!firstCard) {
    // рдкрд╣рд▓рд╛ рдХрд╛рд░реНрдб рдЪреБрдирд╛ рдЧрдпрд╛
    firstCard = card;
    return;
  }

  // рджреВрд╕рд░рд╛ рдХрд╛рд░реНрдб рдЪреБрдирд╛ рдЧрдпрд╛
  secondCard = card;
  moves++;
  updateStats();
  lockBoard = true;

  checkForMatch();
}

// рдореИрдЪ рдЪреЗрдХ рдХрд░реЛ
function checkForMatch() {
  const isMatch = firstCard.dataset.value === secondCard.dataset.value;

  if (isMatch) {
    // рдореИрдЪ рд╣реЛ рдЧрдпрд╛: рджреЛрдиреЛрдВ рдХреЛ matched рдХреНрд▓рд╛рд╕ рджреЗ рджреЛ
    firstCard.classList.add('matched');
    secondCard.classList.add('matched');
    matches++;
    resetTurn();
    updateStats();
    checkWin();
  } else {
    // рдореИрдЪ рдирд╣реАрдВ: рдереЛрдбрд╝реА рджреЗрд░ рдХреЗ рдмрд╛рдж рджреЛрдиреЛрдВ рдХреЛ рд╡рд╛рдкрд╕ рдкрд▓рдЯрд╛ (face-down)
    setTimeout(() => {
      firstCard.classList.remove('flipped');
      secondCard.classList.remove('flipped');
      resetTurn();
    }, 800);
  }
}

// рдЯрд░реНрди рд░рд┐рд╕реЗрдЯ рдХрд░реЛ
function resetTurn() {
  [firstCard, secondCard] = [null, null];
  lockBoard = false;
}

// stats рдЕрдкрдбреЗрдЯ
function updateStats() {
  movesSpan.textContent = `Moves: ${moves}`;
  matchesSpan.textContent = `Matches: ${matches}`;
}

// рдЧреЗрдо рдЬреАрддрдиреЗ рдкрд░
function checkWin() {
  if (matches === icons.length) {
    setTimeout(() => {
      alert(`ЁЯОЙ рдмрдврд╝рд┐рдпрд╛! рдЖрдк рдЬреАрдд рдЧрдПред Moves: ${moves}`);
    }, 200);
  }
}

// restart рдмрдЯрди
restartBtn.addEventListener('click', () => initGame());

// рдкрд╣рд▓реА рдмрд╛рд░ рд╢реБрд░реВ рдХрд░реЛ
initGame();
